{
  "metadata": {
    "title": "JavaScript Interview Questions"
  },
  "items": [
    {
      "id": 1,
      "question": "What is JavaScript?",
      "answer": [
        "A high-level, interpreted programming language called JavaScript makes it possible to create interactive web pages and online apps with dynamic functionality. Commonly referred to as the universal language, Javascript is primarily used by developers for front-end and back-end work."
      ],
      "level": 0,
      "tags": [],
      "url": "https://builtin.com/software-engineering-perspectives/javascript-interview-questions"
    },
    {
      "id": 2,
      "question": "What are the different data types in JavaScript?",
      "answer": [
        "JavaScript has six primitive data types:",
        "Number",
        "String",
        "Boolean",
        "Null",
        "Undefined",
        "Symbol",
        "Compound data types",
        "Object",
        "Array"
      ],
      "level": 0,
      "tags": [],
      "url": "https://builtin.com/software-engineering-perspectives/javascript-interview-questions"
    },
    {
      "id": 3,
      "question": "What is hoisting in JavaScript?",
      "answer": [
        "Hoisting is a JavaScript concept that refers to the process of moving declarations to the top of their scope. This means that variables and functions can be used before they are declared, as long as they are declared before they are used in a function."
      ],
      "level": 0,
      "tags": [],
      "url": "https://builtin.com/software-engineering-perspectives/javascript-interview-questions"
    },
    {
      "id": 4,
      "question": "What is the difference between null and undefined?",
      "answer": [
        "null is an assignment value that represents no value or an empty value, while undefined is a variable that has been declared but not assigned a value."
      ],
      "level": 0,
      "tags": [],
      "url": "https://builtin.com/software-engineering-perspectives/javascript-interview-questions"
    },
    {
      "id": 5,
      "question": "What is the purpose of the “this” keyword in JavaScript?",
      "answer": [
        "The this keyword refers to the object that is executing the current function or method. It allows access to object properties and methods within the context of that object."
      ],
      "level": 0,
      "tags": [],
      "url": "https://builtin.com/software-engineering-perspectives/javascript-interview-questions"
    },
    {
      "id": 6,
      "question": "What is the difference between == and === operators in JavaScript?",
      "answer": [
        "The equality == operator is a comparison operator that compares two values and returns true if they are equal. The strict equality === operator is also a comparison operator, but it compares two values and returns true only if they are equal and of the same type."
      ],
      "level": 0,
      "tags": [],
      "url": "https://builtin.com/software-engineering-perspectives/javascript-interview-questions"
    },
    {
      "id": 7,
      "question": "What is the difference between “var” and “let” keywords in JavaScript?",
      "answer": [
        "The var and let keywords are both used to declare variables in JavaScript. However, there are some key differences between the two keywords.",
        "The var keyword declares a global variable, which means that the variable can be accessed from anywhere in the code. The let keyword declares a local variable, which means that the variable can only be accessed within the block of code where it is declared."
      ],
      "level": 0,
      "tags": [],
      "url": "https://builtin.com/software-engineering-perspectives/javascript-interview-questions"
    },
    {
      "id": 8,
      "question": "What are closures in JavaScript?",
      "answer": [
        "Closures (closureFn) are functions that have access to variables from an outer function even after the outer function has finished executing. They “remember” the environment in which they were created."
      ],
      "level": 0,
      "tags": [],
      "url": "https://builtin.com/software-engineering-perspectives/javascript-interview-questions"
    },
    {
      "id": 9,
      "question": "What is event delegation in JavaScript?",
      "answer": [
        "Event delegation is a technique where you attach a single event listener to a parent element, and that event listener handles events occurring on its child elements. It helps optimize performance and reduce memory consumption."
      ],
      "level": 0,
      "tags": [],
      "url": "https://builtin.com/software-engineering-perspectives/javascript-interview-questions"
    },
    {
      "id": 10,
      "question": "What is the difference between “let”, “const”, and “var”?",
      "answer": [
        "let and const were introduced in ES6 and have block scope. let is reassignable, and const is non-reassignable. var is function-scoped and can be redeclared and reassigned throughout the function."
      ],
      "level": 0,
      "tags": [],
      "url": "https://builtin.com/software-engineering-perspectives/javascript-interview-questions"
    },
    {
      "id": 11,
      "question": "What is “using”",
      "answer": [""],
      "level": 0,
      "tags": [],
      "url": "https://builtin.com/software-engineering-perspectives/javascript-interview-questions"
    },
    {
      "id": 12,
      "question": "What is implicit type coercion in JavaScript?",
      "answer": [
        "Implicit type coercion is a JavaScript concept that refers to the process of converting a value from one type to another. If you try to add a string to a number, JavaScript will implicitly coerce the string to a number before performing the addition operation."
      ],
      "level": 0,
      "tags": [],
      "url": "https://builtin.com/software-engineering-perspectives/javascript-interview-questions"
    },
    {
      "id": 13,
      "question": "Explain the concept of prototypes in JavaScript.",
      "answer": [
        "Prototypes are a mechanism used by JavaScript objects for inheritance. Every JavaScript object has a prototype, which provides properties and methods that can be accessed by that object."
      ],
      "level": 0,
      "tags": [],
      "url": "https://builtin.com/software-engineering-perspectives/javascript-interview-questions"
    },
    {
      "id": 14,
      "question": "How can you clone an object in JavaScript?",
      "answer": [
        "There are multiple ways to clone an object in JavaScript. One common method is using the Object.assign() method or the spread operator (...)."
      ],
      "level": 0,
      "tags": [],
      "url": "https://builtin.com/software-engineering-perspectives/javascript-interview-questions"
    },
    {
      "id": 15,
      "question": "What are higher-order functions in JavaScript?",
      "answer": [
        "Higher order functions are functions that can accept other functions as arguments or return functions as their results. They enable powerful functional programming patterns in JavaScript."
      ],
      "level": 1,
      "tags": [],
      "url": "https://builtin.com/software-engineering-perspectives/javascript-interview-questions"
    },
    {
      "id": 16,
      "question": "What is the purpose of the bind() method in JavaScript?",
      "answer": [
        "The bind() method is used to create a new function with a specified this value and an initial set of arguments. It allows you to set the context of a function permanently."
      ],
      "level": 1,
      "tags": [],
      "url": "https://builtin.com/software-engineering-perspectives/javascript-interview-questions"
    },
    {
      "id": 17,
      "question": "What is the difference between function declarations and function expressions?",
      "answer": [
        "Function declarations are defined using the function keyword, while function expressions are defined by assigning a function to a variable. Function declarations are hoisted, while function expressions are not."
      ],
      "level": 1,
      "tags": [],
      "url": "https://builtin.com/software-engineering-perspectives/javascript-interview-questions"
    },
    {
      "id": 18,
      "question": "What are the different types of errors in JavaScript?",
      "answer": [
        "JavaScript can throw a variety of errors, including:",

        "Syntax errors: These errors occur when the JavaScript code is not syntactically correct.",
        "Runtime errors: These errors occur when the JavaScript code is executed and there is a problem.",
        "Logical errors: These errors occur when the JavaScript code does not do what it is supposed to do."
      ],
      "level": 1,
      "tags": [],
      "url": "https://builtin.com/software-engineering-perspectives/javascript-interview-questions"
    },
    {
      "id": 19,
      "question": "What is memoization in JavaScript?",
      "answer": [
        "Memoization is a technique that can be used to improve the performance of JavaScript code. Memoization works by storing the results of expensive calculations in a cache. This allows the JavaScript code to avoid re-performing the expensive calculations if the same input is provided again."
      ],
      "level": 1,
      "tags": [],
      "url": "https://builtin.com/software-engineering-perspectives/javascript-interview-questions"
    },
    {
      "id": 20,
      "question": "What is recursion in JavaScript?",
      "answer": [
        "Recursion is a programming technique that allows a function to call itself. Recursion can be used to solve a variety of problems, such as finding the factorial of a number or calculating the Fibonacci sequence."
      ],
      "level": 1,
      "tags": [],
      "url": "https://builtin.com/software-engineering-perspectives/javascript-interview-questions"
    },
    {
      "id": 21,
      "question": "What is the use of a constructor function in JavaScript?",
      "answer": [
        "A constructor function is a special type of function that is used to create objects. Constructor functions are used to define the properties and methods of an object."
      ],
      "level": 1,
      "tags": [],
      "url": "https://builtin.com/software-engineering-perspectives/javascript-interview-questions"
    },
    {
      "id": 22,
      "question": "What is the difference between a function declaration and a function expression in JavaScript?",
      "answer": [
        "A function declaration is a statement that defines a function. A function expression is an expression that evaluates to a function. "
      ],
      "level": 1,
      "tags": [],
      "url": "https://builtin.com/software-engineering-perspectives/javascript-interview-questions"
    },
    {
      "id": 23,
      "question": "What is a callback function in JavaScript?",
      "answer": [
        "A callback function is a function passed as an argument to another function, which is then invoked inside the outer function. It allows asynchronous or event-driven programming."
      ],
      "level": 1,
      "tags": [],
      "url": "https://builtin.com/software-engineering-perspectives/javascript-interview-questions"
    },
    {
      "id": 24,
      "question": "What are promises in JavaScript?",
      "answer": [
        "Promises are objects used for asynchronous operations. They represent the eventual completion or failure of an asynchronous operation and allow chaining and handling of success or error cases."
      ],
      "level": 1,
      "tags": [],
      "url": "https://builtin.com/software-engineering-perspectives/javascript-interview-questions"
    },
    {
      "id": 25,
      "question": "What is the difference between synchronous and asynchronous programming?",
      "answer": [
        "In synchronous programming, the program execution occurs sequentially, and each statement blocks the execution until it is completed. In asynchronous programming, multiple tasks can be executed concurrently, and the program doesn’t wait for a task to finish before moving to the next one."
      ],
      "level": 1,
      "tags": [],
      "url": "https://builtin.com/software-engineering-perspectives/javascript-interview-questions"
    },
    {
      "id": 26,
      "question": "Explain the concept of event bubbling in JavaScript.",
      "answer": [
        "Event bubbling is the process where an event triggers on a nested element, and then the same event is propagated to its parent elements in the document object model (DOM) tree. It starts from the innermost element and goes up to the document root."
      ],
      "level": 1,
      "tags": [],
      "url": "https://builtin.com/software-engineering-perspectives/javascript-interview-questions"
    },
    {
      "id": 27,
      "question": "What are arrow functions in JavaScript?",
      "answer": [
        "Arrow functions are a concise syntax for writing JavaScript functions. They have a more compact syntax compared to traditional function expressions and inherit the this value from their surrounding scope."
      ],
      "level": 1,
      "tags": [],
      "url": "https://builtin.com/software-engineering-perspectives/javascript-interview-questions"
    },
    {
      "id": 28,
      "question": "What is the purpose of the setTimeout() function in JavaScript?",
      "answer": [
        "The setTimeout() function is used to delay the execution of a function or the evaluation of an expression after a specified amount of time in milliseconds."
      ],
      "level": 1,
      "tags": [],
      "url": "https://builtin.com/software-engineering-perspectives/javascript-interview-questions"
    },
    {
      "id": 29,
      "question": "How can you prevent the default behavior of an event in JavaScript?",
      "answer": [
        "You can use the preventDefault() method on the event object within an event handler to prevent the default behavior associated with that event."
      ],
      "level": 1,
      "tags": [],
      "url": "https://builtin.com/software-engineering-perspectives/javascript-interview-questions"
    },
    {
      "id": 30,
      "question": "What is the difference between localStorage and sessionStorage in JavaScript?",
      "answer": [
        "Both localStorage and sessionStorage are web storage objects in JavaScript, but they have different scopes and lifetimes.",
        "localStorage persists data even after the browser window is closed and is accessible across different browser tabs/windows of the same origin.",
        "sessionStorage stores data for a single browser session and is accessible only within the same tab or window."
      ],
      "level": 1,
      "tags": [],
      "url": "https://builtin.com/software-engineering-perspectives/javascript-interview-questions"
    },
    {
      "id": 31,
      "question": "How can you convert a string to lowercase in JavaScript?",
      "answer": [
        "You can use the toLowerCase() method to convert a string to lowercase in JavaScript."
      ],
      "level": 1,
      "tags": [],
      "url": "https://builtin.com/software-engineering-perspectives/javascript-interview-questions"
    },
    {
      "id": 32,
      "question": "What is the purpose of the map() function in JavaScript?",
      "answer": [
        "The map() function is used to iterate over an array and apply a transformation or computation on each element. It returns a new array with the results of the transformation."
      ],
      "level": 2,
      "tags": [],
      "url": "https://builtin.com/software-engineering-perspectives/javascript-interview-questions"
    },
    {
      "id": 33,
      "question": "What is the difference between splice() and slice()?",
      "answer": [
        "splice() is used to modify an array by adding, removing, or replacing elements at a specific position.",
        "slice() is used to create a new array that contains a portion of an existing array, specified by the starting and ending indices."
      ],
      "level": 2,
      "tags": [],
      "url": "https://builtin.com/software-engineering-perspectives/javascript-interview-questions"
    },

    {
      "id": 34,
      "question": "What is the purpose of the reduce() function in JavaScript?",
      "answer": [
        "The reduce() function is used to reduce an array to a single value by applying a function to each element and accumulating the result."
      ],
      "level": 2,
      "tags": [],
      "url": "https://builtin.com/software-engineering-perspectives/javascript-interview-questions"
    },
    {
      "id": 35,
      "question": "How can you check if an array includes a certain value in JavaScript?",
      "answer": [
        "You can use the includes() method to check if an array includes a specific value. It returns true if the value is found, and false otherwise."
      ],
      "level": 2,
      "tags": [],
      "url": "https://builtin.com/software-engineering-perspectives/javascript-interview-questions"
    },
    {
      "id": 36,
      "question": "What is the difference between prototype and instance properties in JavaScript?",
      "answer": [
        "A prototype property is a property that is defined on the prototype object of a constructor function. Instance properties are properties that are defined on individual objects that are created by a constructor function.",
        "Prototype properties are shared by all objects that are created by a constructor function. Instance properties are not shared by other objects."
      ],
      "level": 0,
      "tags": [],
      "url": "https://builtin.com/software-engineering-perspectives/javascript-interview-questions"
    },
    {
      "id": 37,
      "question": "What is the difference between an array and an object in JavaScript?",
      "answer": [
        "An array is a data structure that can store a collection of values. An object is a data structure that can store a collection of properties.",
        "Arrays are indexed by numbers. Objects are indexed by strings. Arrays can only store primitive data types and objects. Objects can store primitive data types, objects and arrays."
      ],
      "level": 2,
      "tags": [],
      "url": "https://builtin.com/software-engineering-perspectives/javascript-interview-questions"
    },
    {
      "id": 38,
      "question": "How can you remove duplicates from an array in JavaScript?",
      "answer": [
        "One way to remove duplicates from an array is by using the Set object or by using the filter() method with the indexOf() method."
      ],
      "level": 2,
      "tags": [],
      "url": "https://builtin.com/software-engineering-perspectives/javascript-interview-questions"
    },
    {
      "id": 39,
      "question": "What is the purpose of the fetch() function in JavaScript?",
      "answer": [
        "The fetch() function is used to make asynchronous HTTP requests in JavaScript. It returns a Promise that resolves to the response from the server."
      ],
      "level": 2,
      "tags": [],
      "url": "https://builtin.com/software-engineering-perspectives/javascript-interview-questions"
    },
    {
      "id": 40,
      "question": "What is a generator function in JavaScript?",
      "answer": [
        "A generator function is a special type of function that can be paused and resumed during its execution. It allows generating a sequence of values over time, using the yield keyword."
      ],
      "level": 2,
      "tags": [],
      "url": "https://builtin.com/software-engineering-perspectives/javascript-interview-questions"
    },
    {
      "id": 41,
      "question": "What is the purpose of the async and await keywords in JavaScript?",
      "answer": [
        "The async and await keywords are used for handling asynchronous operations in a more synchronous-like manner. The async keyword is used to define an asynchronous function, and the await keyword is used to pause the execution of an async function until a promise is fulfilled or rejected."
      ],
      "level": 2,
      "tags": [],
      "url": "https://builtin.com/software-engineering-perspectives/javascript-interview-questions"
    },
    {
      "id": 42,
      "question": "",
      "answer": [""],
      "level": 2,
      "tags": [],
      "url": "https://builtin.com/software-engineering-perspectives/javascript-interview-questions"
    }
  ]
}
