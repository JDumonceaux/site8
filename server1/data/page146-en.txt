<a href="https://www.typescriptlang.org/tsconfig/">TypeScript: TSConfig</a>
<a href="https://www.typescriptlang.org/docs/handbook/tsconfig-json.html">TypeScript: Documentation</a>
<a href="https://github.com/tsconfig/bases">Recommended tsconfig settings</a>

<q>The tsconfig.json file specifies the root files and the compiler options required to compile the project.</q>
<q>The presence of a tsconfig.json file in a directory indicates that the directory is the root of a TypeScript project.</q>

Note: You should have different tsconfig files for the React.js frontend and the Node.js backend.

<h2>React.Js</h2>

<pre><code>
npm install --save-dev @tsconfig/vite-react
</code></pre>

This is an example of extending an recommended config.  You can extend multiple .json files.
<pre><code>
{
  "extends": "@tsconfig/vite-react/tsconfig.json"
  "include": ["src/**/*"],
  "exclude": ["**/*.spec.ts"]
}
</code></pre>

<a href="https://github.com/tsconfig/bases/blob/main/bases/vite-react.json">React Vite tsconfig.json</a>

<h2>Node.Js - version 22</h2>

<pre><code>
npm install --save-dev @tsconfig/node22
</code></pre>

<pre><code>
"extends": "@tsconfig/node22/tsconfig.json"
</code></pre>

<a href="https://github.com/tsconfig/bases/blob/main/bases/node22.json">Node.js 22 tsconfig.json</a>

<h2>This is my React tsconfig.js</h2>

As you can see, there are many options. I'm targeting some experimental features, so I haven't gone with the recommended settings.
<pre><code>
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "_version": "3.0.0",

  "compilerOptions": {
    // https://www.typescriptlang.org/tsconfig/
    "target": "ESNext",
    "useDefineForClassFields": true,
    // ESNext.Array: Adds in support for the ECMAScript 2023: toSortedArray() method, etc.
    "lib": ["DOM", "DOM.Iterable", "ESNext", "ESNext.Array"],

    /* Module */
    // Sets the module system for the program (i.e. ES2023)
    "module": "ESNext",

    /* Module Resolution */
    // Set module resultion strategy
    "moduleResolution": "Node",

    /* Module Suffixes */
    // Override file names for module resolution
    // "moduleSuffixes": ["js", "jsx", "ts", "tsx"],

    /* No resolve */
    // Do not add import and references directives to the program
    // "noResolve": false,

    /* Paths */
    // lets you declare how TypeScript should resolve an import
    "paths": {
      "*": ["./src/*"],
      "components/*": ["./src/components/*"],
      "hooks/*": ["./src/hooks/*"],
      "providers/*": ["./src/providers/*"],
      "services/*": ["./src/services/*"],
      "store/*": ["./src/store/*"],
      "styles/*": ["./src/styles/*"],
      "types/*": ["./src/types/*"],
      "util/*": ["./src/util/*"],
      "graphql/*": ["./src/graphql/*"],
      "content/*": ["./src/content/*"]
    },

    /* Resolve JSON */
    // Allows .json files to be imported.
    // TypeScript does not support resolving JSON files by default
    "resolveJsonModule": true,

    /* resolvePackageJsonExports */
    // forces TypeScript to consult the exports field of package.json files
    // if it ever reads from a package in node_modules.  Default is true
    // resolvePackageJsonExports: true,
    // Default is true
    // resolvePackageJsonImports: true,

    /* rootDir */
    // Alters how code is converted from /scr to /dist upon build
    // "rootDir": "./src",

    /* rootDirs */
    // Combine multiple directories into one virtual directory
    // "rootDirs": ["src", "generated"]

    /* typeRoots */
    // Specifies which type files are included

    /* Types */
    // Specifies which type files are included
    // Emit
    // declarationDir
    // declarationMap
    // downlevelIteration
    // emitBOM
    // emitDeclarationOnly
    // importHelpers
    // inlineSourceMap
    // inlineSources
    // mapRoot
    // newLine
    // noEmit
    // noEmitHelpers
    // noEmitOnError
    // outDir
    // outFile
    // preserveConstEnums // Default true

    // Enables the generation of sourcemap files. These files allow debuggers and other tools to display
    // the original TypeScript source code when running the JavaScript output of the TypeScript compiler.
    // Turn of for production!!!
    "sourceMap": true,
    // sourceRoot
    // stripInternal

    /* Type Checking */
    // Warns is unreachable code is detected
    "allowUnreachableCode": false,
    // Warns if a label is declared but not used.  Probably a coding error.
    "allowUnusedLabels": false,
    // Improves performance. Files are parsed in the ECMAScript strict mode.
    "alwaysStrict": true,
    // Prevents 'undefined' from being assigned to optional variables
    "exactOptionalPropertyTypes": true,
    // Prevents unintended fallthroughs in switch statements.
    // Must break, return, or throw at the end of each case
    "noFallthroughCasesInSwitch": true,
    // Prevents defaulting to 'any' when a type is not specified
    "noImplicitAny": true,
    // Warns if inherited class methods do not override parent methods
    "noImplicitOverride": true,
    // Warns if a function doesn't have a return
    "noImplicitReturns": true,
    // Warns if 'this' is any
    "noImplicitThis": true,
    // Prevents access to fields that are not defined
    // Note: 07-2024 JRD - Code seems simplier with this off
    // "noPropertyAccessFromIndexSignature": true,
    // Adds 'undefined' to the type of undefined variables
    "noUncheckedIndexedAccess": true,
    // Warns about unusued local variables
    "noUnusedLocals": true,
    // Warns about unused parameters
    "noUnusedParameters": true,
    // Shorthand for a set of "stict" rules
    "strict": true,
    //"strictBindCallApply": true,
    //"strictFunctionTypes": true,
    //"strictNullChecks": true,
    //"strictPropertyInitialization": true,
    // Changes catch (err: any) to catch (err: unknown)
    "useUnknownInCatchVariables": true,
    /* End - Type Checking */

    /* Modules */
    // Requires that imports be .js, ts, or have a declaration file
    "allowArbitraryExtensions": false,
    // Allows .ts files to be imported. Bundler must handle this.
    // "allowImportingTsExtensions": true,
    // ?
    //"allowUmdGlobalAccess": false,
    // For use with AMD loaders. Not recommended. Use paths instead.
    // "baseUrl": "src",

    /* Custom Conditions  */
    // "customConditions": ["xxx"],

    /* JavaScript Support */
    // Allows JavaScript files to be imported
    // (allows you to mix JavaScript and TypeScript in the same project)
    "allowJs": false,
    // Works with allowJs.  If true, TypeScript will check the JavaScript files for errors
    "checkJs": false,
    // maxNodeModuleJsDepth
    // Works with allowJs.  Default is 0
    // "maxNodeModuleJsDepth": 0,

    /* Editor Support */
    // Removes limit on memory allocation
    // disableSizeLimit
    // List of plugins in editor.  VSCode seems to hanlde this.
    // plugins

    /* Interop Constraints */
    // `import React from 'react'` vs `import * as React from 'react'`
    "allowSyntheticDefaultImports": true,
    // Fixes issue with TypeScript treats CommonJS/AMD/UMD modules similar to ES6 modules
    "esModuleInterop": true,
    // Enforces case-sensitivity in file names fileManger.ts vs. FileManager.ts
    "forceConsistentCasingInFileNames": true,
    // ?? Something to do with Declaration files (a.k.a. .d.ts files)
    //"isolatedDeclarations": true,
    // Warns is single-file transpilation is unable to understand the Typescript code
    "isolatedModules": true,
    // preserveSymlinks
    // verbatimModuleSyntax

    /* JSX */
    // .tsx -> Emit .js files with the JSX changed to _jsx calls optimized for production
    "jsx": "react-jsx"
    // jsxFactory
    // jsxFragmentFactory
    // jsxImportSource

    // Do not emit compiler output files like JavaScript source code, source-maps or declarations.
    // "noEmit": true,
  },
  // Allow absolute imports from the `src` directory
  "include": ["src"],
  "exclude": ["node_modules", "__test__"],
  "references": [{ "path": "./tsconfig.node.json" }]
}
</code></pre>



