<h2>1. Use `let` and `const` Instead of `var`</h2>

<pre><code>
let count = 0;
const PI = 3.14;

vs.
var count = 0;
</code></pre>

Using `let` and `const` helps prevent scope-related bugs by ensuring variables are only accessible within the block they are defined.  `var` has function scope which can lead to bugs and unpredictable behavior.  `let` and `const` which have block scope.

<h2>2. Use Default Parameters</h2>

"Guest" is a default parameter.
<pre><code>
function greet(name = 'Guest') {
return `Hello, ${name}!`;
}
</code></pre>

<h2>3. Use Template Literals</h2>

<pre><code>
`string text`

// Multi line strings 
`string text line 1
 string text line 2`

// String interpolation
`string text ${expression} string text`

tagFunction`string text ${expression} string text`
</code></pre>

Template literals are literals delimited with backtick (`) characters, allowing for multi-line strings, string interpolation with embedded expressions, and special constructs called tagged templates.

<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals">Mozilla - Template literals (Template strings)</a>

<h2>4. Destructuring</h2>

Destructuring assignment allows you to extract properties from objects and elements from arrays into distinct variables easily.

<pre><code>
const user = { name: 'Jane', age: 25 };
const { name, age } = user;  // Destructure user
console.log(name, age); 
</code></pre>

<h2>5. Arrow Functions</h2>

Arrow functions provide a concise syntax for function expressions and ensure that `this` is lexically bound.

<pre><code>
const add = (a, b) => a + b;
</code></pre>

<h2>6. Spread Operator</h2>

The spread operator allows you to spread the elements of an array or object into another array or object.

<pre><code>
const arr1 = [1, 2, 3];
const arr2 = [4, 5, 6];
const combined = […arr1, …arr2];
</code></pre>

<h2>7. Rest Parameters</h2>

Rest parameters allow you to handle an indefinite number of arguments as an array, making your functions more flexible.

<pre><code>
const user = { name: 'Jane', age: 25 };
const { name, ...rest } = user;  // Destructure user into 'name' and the "rest"
console.log ( ... rest );
</code></pre>

<h2>8. Short-Circuit Evaluation</h2>

There are a couple of variations of the short-circuit evaluation.

We tend to do nested and multi-level if-else statements - making the code complex.  Changing this to a short-circuit version, we remove the if-else statements and exit early from a function.   This is especially useful for processing API calls - where parameters may be missing or invalid.
<pre><code>
  private function ( items ) {
    if (!items) {
      return undefined;   // Exit early  vs. if-else construction
    }
    ....
  }
</code></pre>

The second variation is using the logical &&` and `||`
<pre><code>
const isLoggedIn = true;
const user = isLoggedIn && { name: 'Jane', age: 25 };
</code></pre>



